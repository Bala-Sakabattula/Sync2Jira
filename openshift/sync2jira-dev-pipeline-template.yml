# Template to produce a new sync2jira dev CI/CD pipeline in OpenShift.
#
# Dev pipeline is a part of the sync2jira Pipeline, covers the following steps:
#
# - Run Flake8 and Pylint checks
# - Run unit tests
# - Build SRPM
# - Build RPM
# - Invoke Rpmlint
# - Build container
# - Run functional tests
# - Push container
#
# Required Jenkins Plugins:
# - Openshift Sync plugin
# - Openshift Client plugin
# - Kubernetes plugin
# - SSH Agent plugin
# - Timestamper plugin
#
---
apiVersion: v1
kind: Template
metadata:
  name: sync2jira-dev-pipeline
parameters:
- name: NAME
  displayName: Short unique identifier for the templated instances
  description: This field is used to deploy multiple pipelines to one OpenShift project from this template.
  required: true
  value: sync2jira-dev-pipeline
- name: SYNC2JIRA_GIT_REPO
  displayName: sync2jira Git repo URL
  description: Default sync2jira Git repo URL in which to run dev tests against
  required: true
  value: https://pagure.io/sync-to-jira
- name: SYNC2JIRA_GIT_REF
  displayName: sync2jira Git repo ref
  description: Default sync2jira Git repo ref in which to run dev tests against
  required: true
  value: develop
- name: SYNC2JIRA_MAIN_BRANCH
  displayName: Name of the main branch.
  description: If SYNC2JIRA_MAIN_BRANCH equals SYNC2JIRA_GIT_REF, publishing steps will be automatically performed.
  value: develop
  required: true
- name: JENKINS_AGENT_CLOUD_NAME
  displayName: Name of OpenShift cloud in Jenkins master configuration
  required: true
  value: openshift
- name: JENKINS_AGENT_IMAGE
  displayName: Container image for Jenkins slave pods
  required: true
  value: quay.io/factory2/sync2jira-jenkins-slave:latest
- name: SYNC2JIRA_DEV_IMAGE_DESTINATIONS
  displayName: Comma seperated list of container repository/tag to which the built sync2jira dev image will be pushed
  description: OpenShift registries must be prefixed with 'atomic:'
  required: false
  value: "atomic:quay.io/factory2/sync2jira:latest"
- name: CONTAINER_REGISTRY_CREDENTIALS
  displayName: Secret name of container registries used for pulling and pushing images
  value: factory2-pipeline-registry-credentials
  required: false
- name: SYNC2JIRA_DEV_IMAGE_TAG
  displayName: Tag name of the resulting container image for development environment
  value: "latest"
  required: true
- name: SYNC2JIRA_IMAGESTREAM_NAME
  displayName: Name of ImageStream for sync2jira container images
  required: true
  value: sync2jira
- name: SYNC2JIRA_IMAGESTREAM_NAMESPACE
  displayName: Namespace of ImageStream for sync2jira container images
  required: false
- name: SYNC2JIRA_CACERT_URL
  displayName: URL to an additional CA cert to pull down and trust.
  required: true
  value: https://password.corp.redhat.com/RH-IT-Root-CA.crt
- name: FORCE_PUBLISH_IMAGE
  displayName: Whether to push the resulting image regardless of the Git branch
  value: "false"
  required: true
- name: TAG_INTO_IMAGESTREAM
  displayName: Whether to tag the pushed image as dev
  value: "true"
  required: true
labels:
  template: sync2jira-dev-pipeline
objects:
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: "${NAME}-jenkins-slave"
    labels:
      app: "${NAME}"
  spec:
    runPolicy: "Serial"
    completionDeadlineSeconds: 1800
    strategy:
      dockerStrategy:
        forcePull: true
        dockerfilePath: openshift/containers/jenkins-slave/Dockerfile
    resources:
      requests:
        memory: "512Mi"
        cpu: "300m"
      limits:
       memory: "768Mi"
       cpu: "500m"
    source:
      git:
        uri: "${SYNC2JIRA_GIT_REPO}"
        ref: "${SYNC2JIRA_GIT_REF}"
    output:
      to:
        kind: "DockerImage"
        name: "${JENKINS_AGENT_IMAGE}"
      pushSecret:
       name: "${CONTAINER_REGISTRY_CREDENTIALS}"

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: "${NAME}-jenkins-slave"
    labels:
      app: "${NAME}"

- kind: RoleBinding
  apiVersion: v1
  metadata:
    name: "${NAME}-jenkins-slave_edit"
    labels:
      app: "${NAME}"
  subjects:
  - kind: ServiceAccount
    name: "${NAME}-jenkins-slave"
  roleRef:
    name: edit

- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: "${NAME}"
    labels:
      app: "${NAME}"
  spec:
    runPolicy: "Serial" # FIXME: Parallel is supported, but we have limited quota in UpShift.
    completionDeadlineSeconds: 1800
    strategy:
      type: JenkinsPipeline
      source:
        type: None
      jenkinsPipelineStrategy:
        env:
        - name: "SYNC2JIRA_GIT_REPO"
          value: "${SYNC2JIRA_GIT_REPO}"
        - name: "SYNC2JIRA_GIT_REF"
          value: "${SYNC2JIRA_GIT_REF}"
        - name: "JENKINS_AGENT_CLOUD_NAME"
          value: "${JENKINS_AGENT_CLOUD_NAME}"
        - name: "JENKINS_AGENT_SERVICE_ACCOUNT"
          value:  "${NAME}-jenkins-slave"
        - name: "SYNC2JIRA_DEV_IMAGE_DESTINATIONS"
          value: "${SYNC2JIRA_DEV_IMAGE_DESTINATIONS}"
        - name: "FORCE_PUBLISH_IMAGE"
          value: "${FORCE_PUBLISH_IMAGE}"
        - name: "TAG_INTO_IMAGESTREAM"
          value: "${TAG_INTO_IMAGESTREAM}"
        jenkinsfile: |-
          pipeline {
            agent {
              kubernetes {
                cloud params.JENKINS_AGENT_CLOUD_NAME
                label "jenkins-slave-${UUID.randomUUID().toString()}"
                serviceAccount params.JENKINS_AGENT_SERVICE_ACCOUNT
                containerTemplate(
                    name: 'jnlp',
                    image: '${JENKINS_AGENT_IMAGE}',
                    ttyEnabled: true,
                    alwaysPullImage: true,
                    resourceRequestCpu: '300m',
                    resourceLimitCpu: '500m',
                    resourceRequestMemory: '768Mi',
                    resourceLimitMemory: '1Gi',
                    envVars: [
                      secretEnvVar(key: 'REGISTRY_CREDENTIALS', secretName: "${CONTAINER_REGISTRY_CREDENTIALS}", secretKey: '.dockerconfigjson'),
                      envVar(key: 'LD_PRELOAD', value: '/usr/lib64/libnss_wrapper.so'),
                      envVar(key: 'NSS_WRAPPER_PASSWD', value: '/tmp/passwd'),
                      envVar(key: 'NSS_WRAPPER_GROUP', value: '/etc/group')
                    ]
                )
              }
            }
            options {
              timeout(time: 30, unit: 'MINUTES')
            }
            stages {
              stage('Prepare') {
                steps {
                  checkout([$class: 'GitSCM',
                    branches: [[name: params.SYNC2JIRA_GIT_REF]],
                    userRemoteConfigs: [[url: params.SYNC2JIRA_GIT_REPO]],
                  ])
                  script {
                    env.SYNC2JIRA_GIT_COMMIT_ID = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    // Generate a version-release number for the target Git commit
                    def versions = sh(returnStdout: true, script: 'source ./version.sh && echo -en "$SYNC2JIRA_VERSION\n$SYNC2JIRA_CONTAINER_VERSION"').split('\n')
                    env.SYNC2JIRA_VERSION = versions[0]
                    env.SYNC2JIRA_CONTAINER_VERSION = versions[1]
                    env.TEMP_TAG = env.SYNC2JIRA_CONTAINER_VERSION + '-jenkins-' + currentBuild.id
                    env.PIPELINE_NAMESPACE = readFile('/run/secrets/kubernetes.io/serviceaccount/namespace').trim()
                    env.PIPELINE_USERNAME = sh(returnStdout: true, script: 'id -un').trim()
                  }
                }
              }
              stage('Invoke Flake8') {
                steps {
                  sh 'flake8 sync2jira'
                }
              }
              stage('Run unit tests') {
                steps {
                  // run unit tests
                  sh 'tox'
                }
                post {
                  always {
                    junit 'xunit-tests.xml'
                  }
                }
              }
              stage('Build Artifacts') {
                failFast false
                parallel {
                  stage('Build SRPM') {
                    steps {
                      sh './rpmbuild.sh -bs'
                    }
                    post {
                      success {
                        archiveArtifacts artifacts: 'rpmbuild-output/*.src.rpm'
                      }
                    }
                  }
                  stage('Build RPM') {
                    steps {
                      sh './rpmbuild.sh -bb'
                    }
                    post {
                      success {
                        archiveArtifacts artifacts: 'rpmbuild-output/*/*.rpm'
                      }
                    }
                  }
                  stage('Invoke Rpmlint') {
                    steps {
                      sh 'rpmlint -f rpmlint-config.py rpmbuild-output/*/*.rpm'
                    }
                  }
                }
              }
              stage('Build container') {
                //options {
                //  timeout(time: 15, unit: 'MINUTES')
                //}
                environment {
                  BUILDCONFIG_INSTANCE_ID = "sync2jira-container-build-${currentBuild.id}"
                }
                steps {
                  script {
                    openshift.withCluster() {
                      // OpenShift BuildConfig doesn't support specifying a tag name at build time.
                      // We have to create a new BuildConfig for each container build.
                      // Create a BuildConfig from a seperated Template.
                      echo 'Creating a BuildConfig...'
                      def template = readYaml file: 'openshift/sync2jira-container-template.yml'
                      def processed = openshift.process(template,
                        "-p", "NAME=" + env.BUILDCONFIG_INSTANCE_ID,
                        '-p', 'SYNC2JIRA_GIT_REPO=' + params.SYNC2JIRA_GIT_REPO,
                        '-p', 'SYNC2JIRA_GIT_REF=' + env.SYNC2JIRA_GIT_COMMIT_ID,
                        '-p', 'SYNC2JIRA_IMAGE_TAG=' + env.TEMP_TAG,
                        '-p', 'SYNC2JIRA_VERSION=' + env.SYNC2JIRA_VERSION,
                        '-p', 'SYNC2JIRA_IMAGESTREAM_NAME=${SYNC2JIRA_IMAGESTREAM_NAME}',
                        '-p', 'SYNC2JIRA_IMAGESTREAM_NAMESPACE=${SYNC2JIRA_IMAGESTREAM_NAMESPACE}',
                      )
                      def created = openshift.apply(processed)
                      def bc = openshift.selector('bc', env.BUILDCONFIG_INSTANCE_ID)
                      echo 'Starting a container build from the created BuildConfig...'
                      buildSelector = bc.startBuild()
                      // `buildSelector.logs()` can be dumb when the OpenShift Build is not started.
                      // Let's wait for it to be started or completed (failed).
                      echo 'Waiting for the container build to be started...'
                      timeout(5) { // 5 min
                        buildSelector.watch {
                          return !(it.object().status.phase in ["New", "Pending"])
                        }
                      }
                      echo 'Following container build logs...'
                      // This function sometimes hangs infinitely.
                      // Not sure it is a problem of OpenShift Jenkins Client plugin
                      // or OpenShift.
                      // FIXME: logs() step may fail with unknown reasons.
                      timeout(time: 15, activity: false) {
                        buildSelector.logs('-f')
                      }
                      // Ensure the build is stopped
                      echo 'Waiting for the container build to be fully stopped...'
                      timeout(5) { // 5 min
                        buildSelector.watch {
                          return it.object().status.phase != "Running"
                        }
                      }
                      // Assert build result
                      def ocpBuild = buildSelector.object()
                      if (ocpBuild.status.phase != "Complete") {
                        error("Failed to build container image for ${env.TEMP_TAG}, .status.phase=${ocpBuild.status.phase}.")
                      }
                      echo 'Container build is complete.'
                      env.RESULTING_IMAGE_REF = ocpBuild.status.outputDockerImageReference
                      env.RESULTING_IMAGE_DIGEST = ocpBuild.status.output.to.imageDigest
                      // def imagestream = openshift.selector('is', '${SYNC2JIRA_IMAGESTREAM_NAME}')
                      // env.RESULTING_IMAGE_REPO = imagestream.status.dockerImageRepository
                      env.RESULTING_IMAGE_REPO = 'docker-registry.default.svc:5000/sync2jira/sync2jira'
                      env.RESULTING_TAG = env.TEMP_TAG
                    }
                  }
                }
                post {
                  always {
                    script {
                      openshift.withCluster() {
                        echo 'Tearing down...'
                        openshift.selector('bc', env.BUILDCONFIG_INSTANCE_ID).delete()
                      }
                    }
                  }
                }
              }
              stage('Push container') {
                when {
                  expression {
                    return params.FORCE_PUBLISH_IMAGE == 'true' ||
                      params.SYNC2JIRA_GIT_REF == "${SYNC2JIRA_MAIN_BRANCH}"
                  }
                }
                steps {
                  script {
                    def destinations = env.SYNC2JIRA_DEV_IMAGE_DESTINATIONS ?
                      env.SYNC2JIRA_DEV_IMAGE_DESTINATIONS.split(',') : []
                    openshift.withCluster() {
                      def sourceImage = env.RESULTING_IMAGE_REPO + ":" + env.RESULTING_TAG
                      if (env.REGISTRY_CREDENTIALS) {
                         dir ("${env.HOME}/.docker") {
                              writeFile file:'config.json', text: env.REGISTRY_CREDENTIALS
                         }
                      }

                      // pull the built image from imagestream
                      echo "Pulling container from ${sourceImage}..."
                      def registryToken = readFile(file: '/var/run/secrets/kubernetes.io/serviceaccount/token')
                      sh "set -e +x; mkdir -p _build; skopeo copy --src-cert-dir=/var/run/secrets/kubernetes.io/serviceaccount/ --src-creds=serviceaccount:${registryToken}  docker://${sourceImage} dir:_build/sync2jira_container"

                      // push to registries
                      def pushTasks = destinations.collectEntries {
                        ["Pushing ${it}" : {
                          def dest = it
                          // Only docker and atomic registries are allowed
                          if (!it.startsWith('atomic:') && !it.startsWith('docker://')) {
                            dest = 'docker://' + it
                          }
                          echo "Pushing container to ${dest}..."
                          /* Pushes to the internal registry can sometimes randomly fail
                          * with "unknown blob" due to a known issue with the registry
                          * storage configuration. So we retry up to 5 times. */
                          retry(5) {
                            sh "skopeo copy dir:_build/sync2jira_container ${dest}"
                          }
                        }]
                      }
                      parallel pushTasks
                    }
                  }
                }
              }
              stage('Tag into image stream') {
                when {
                  expression {
                    return "${SYNC2JIRA_DEV_IMAGE_TAG}" && params.TAG_INTO_IMAGESTREAM == "true" &&
                      (params.FORCE_PUBLISH_IMAGE == 'true' || params.SYNC2JIRA_GIT_REF == "${SYNC2JIRA_MAIN_BRANCH}")
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject("${SYNC2JIRA_IMAGESTREAM_NAMESPACE}") {
                        def sourceRef = "${SYNC2JIRA_IMAGESTREAM_NAME}:${env.RESULTING_TAG}"
                        def destRef = "${SYNC2JIRA_IMAGESTREAM_NAME}:${SYNC2JIRA_DEV_IMAGE_TAG}"
                        echo "Tagging ${sourceRef} as ${destRef}..."
                        openshift.tag("${sourceRef}", "${destRef}")
                      }
                    }
                  }
                }
              }
            }
            post {
              always {
                script {
                  if (env.RESULTING_TAG) {
                    echo "Removing tag ${env.RESULTING_TAG} from the ImageStream..."
                    openshift.withCluster() {
                      openshift.withProject("${SYNC2JIRA_IMAGESTREAM_NAMESPACE}") {
                        openshift.tag("${SYNC2JIRA_IMAGESTREAM_NAME}:${env.RESULTING_TAG}",
                          "-d")
                      }
                    }
                  }
                }
              }
            }
          }
